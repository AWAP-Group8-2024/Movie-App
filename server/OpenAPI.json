{
  "openapi": "3.0.0",
  "info": {
    "title": "Movie API",
    "description": "API for users to access accounts, profiles, and group interactions.",
    "contact": { "email": "your-email@example.com" },
    "license": { "name": "MIT", "url": "https://opensource.org/licenses/MIT" },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://movieapp-backend-actions-gxfcdkh7h6hccvfu.northeurope-01.azurewebsites.net",
      "description": "azure development server"
    },
    {
      "url": "http://localhost:{port}/",
      "description": "Local development server",
      "variables": {
        "port": {
          "description": "Port on which the server is running",
          "default": 3000
        }
      }
    }
  ],
  "tags": [
    {
      "name": "Users",
      "description": "Operations related to user management"
    },
    {
      "name": "Favorites",
      "description": "Operations related to favorite management"
    },
    {
      "name": "Groups",
      "description": "Operations related to group management"
    }
  ],
  "paths": {
    "/api/user/register": {
      "post": {
        "tags": ["Users"],
        "summary": "Register a new user",
        "description": "Register a new user with an email and password.",
        "operationId": "registerUser",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/user_register_body"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user_register_response"
                }
              }
            }
          },
          "400": { "description": "Invalid email or password" },
          "409": { "description": "Email already exists" }
        }
      }
    },

    "/api/user/login": {
      "post": {
        "tags": ["Users"],
        "summary": "Log in a user",
        "description": "Authenticate a user and return a JWT token.",
        "operationId": "loginUser",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/user_login_body"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user_login_response"
                }
              }
            }
          },
          "400": { "description": "Invalid credentials" },
          "401": { "description": "Invalid password" }
        }
      }
    },

    "/api/user/profile/{id}": {
      "get": {
        "tags": ["Users"],
        "summary": "Get user profile",
        "description": "Retrieve a user's profile information.",
        "operationId": "getUserProfile",
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The profile's ID.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "string" },
            "security": [{ "BearerAuth": [] }]
          }
        ],
        "responses": {
          "200": {
            "description": "User profile retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user_profile_response"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Incorrect password or invalid authorization)."
          },
          "403": { "description": "Forbidden - Invalid credentials provided." },
          "404": { "description": "User not found" },
          "500": { "description": "Internal server error" }
        }
      },
      "put": {
        "tags": ["Users"],
        "summary": "Update user profile",
        "description": "Modify the profile information of an existing user.",
        "operationId": "updateUserProfile",
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the user to update.",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_profile_body"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Profile updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user_profile_response"
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials (incorrect password or invalid authorization)."
          },
          "403": { "description": "Forbidden - Invalid credentials provided." },
          "400": { "description": "No fields to update" },
          "404": { "description": "User not found" },
          "500": { "description": "Internal server error" }
        }
      }
    },

    "/api/user/deleteAccount": {
      "delete": {
        "tags": ["Users"],
        "summary": "Delete user account",
        "description": "Delete the authenticated user's account. The user's ID is obtained from the authentication token.",
        "operationId": "deleteUserAccount",
        "security": [{ "BearerAuth": [] }],
        "responses": {
          "200": {
            "description": "User deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/delete_account_response"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Incorrect password or invalid authorization)."
          },
          "403": { "description": "Forbidden - Invalid credentials provided." },
          "500": { "description": "Internal server error" }
        }
      }
    },

    "/api/user/passwordCheck": {
      "post": {
        "tags": ["Users"],
        "summary": "Check user email and password for account deletion",
        "description": "Verify the user's email and password to confirm the identity before account deletion.",
        "operationId": "passwordCheck",
        "security": [{ "BearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/passwordCheck_body"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password confirmed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/passwordCheck_response"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Incorrect password or invalid authorization)."
          },
          "403": { "description": "Forbidden - Invalid credentials provided." },
          "400": {
            "description": "Invalid credentials (user not found with the provided email)."
          },
          "500": { "description": "Internal server error" }
        }
      }
    },

    "/api/user/groupPendingRequests": {
      "get": {
        "tags": ["Users"],
        "summary": "Get group pending requests",
        "description": "Retrieve pending group requests for the authenticated user.",
        "operationId": "getGroupPendingRequests",
        "security": [{ "BearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Pending group requests retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/user_pending_request_response"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Incorrect password or invalid authorization)."
          },
          "403": { "description": "Forbidden - Invalid credentials provided." },
          "404": { "description": "No group pending requests" },
          "500": { "description": "Internal server error" }
        }
      }
    },

    "/api/favorite/": {
      "get": {
        "tags": ["Favorites"],
        "summary": "Get favorite list by authorization",
        "description": "Retrieve the authenticated user's favorite content list.",
        "operationId": "getFavoriteListByAuth",
        "security": [{ "BearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Favorite list retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/favorite_item_response"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Incorrect password or invalid authorization)."
          },
          "403": { "description": "Forbidden - Invalid credentials provided." },
          "500": { "description": "Internal server error" }
        }
      }
    },

    "/api/favorite/{id}": {
      "get": {
        "tags": ["Favorites"],
        "summary": "Get favorite list by profile ID",
        "description": "Retrieve the favorite content list for a specific user ID.",
        "operationId": "getFavoriteListById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User ID for which to retrieve the favorite content list.",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "security": [{ "BearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Favorite list retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/favorite_item_response"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Incorrect password or invalid authorization)."
          },
          "403": { "description": "Forbidden - Invalid credentials provided." },
          "404": { "description": "User or favorite list not found" },
          "500": { "description": "Internal server error" }
        }
      }
    },

    "/api/favorite/add": {
      "post": {
        "tags": ["Favorites"],
        "summary": "Add content to favorites",
        "description": "Add a new content item to the user's favorite list.",
        "operationId": "insertContentToFavorite",
        "security": [{ "BearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/favorite_add_body" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Content added to favorites successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/favorite_item_response"
                }
              }
            }
          },
          "400": { "description": "Invalid content data" },
          "401": {
            "description": "Unauthorized - Incorrect password or invalid authorization)."
          },
          "403": { "description": "Forbidden - Invalid credentials provided." },
          "500": { "description": "Internal server error" }
        }
      }
    },

    "/api/favorite/check": {
      "post": {
        "tags": ["Favorites"],
        "summary": "Check if content is in favorites",
        "description": "Check if a specific content item is in the user's favorite list.",
        "operationId": "checkFavoriteById",
        "security": [{ "BearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/favorite_check_body" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Check completed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/favorite_check_response"
                }
              }
            }
          },
          "400": { "description": "Content ID is missing" },
          "401": {
            "description": "Unauthorized - Incorrect password or invalid authorization)."
          },
          "403": { "description": "Forbidden - Invalid credentials provided." },
          "500": { "description": "Internal server error" }
        }
      }
    },

    "/api/favorite/delete": {
      "delete": {
        "tags": ["Favorites"],
        "summary": "Delete content from favorites",
        "description": "Delete a content item from the user's favorite list.",
        "operationId": "deleteFavoriteById",
        "security": [{ "BearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/favorite_delete_body" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Favorite deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/favorite_delete_response"
                }
              }
            }
          },
          "400": { "description": "Content ID is missing" },
          "404": { "description": "Favorite content not found" },
          "401": {
            "description": "Unauthorized - Incorrect password or invalid authorization)."
          },
          "403": { "description": "Forbidden - Invalid credentials provided." },
          "500": { "description": "Internal server error" }
        }
      }
    },

    "/api/group/": {
      "get": {
        "tags": ["groups"],
        "summary": "Retrieve all groups",
        "description": "Fetch a list of all groups.",
        "operationId": "getAllGroupsListing",
        "security": [{ "BearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Groups list retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/group_response"
                  },
                  "example": [
                    {
                      "id": 1,
                      "name": "Developers Group",
                      "description": "A group for developers",
                      "creator_id": 101
                    },
                    {
                      "id": 2,
                      "name": "Designers Hub",
                      "description": "A group for designers",
                      "creator_id": 102
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Incorrect password or invalid authorization)."
          },
          "403": { "description": "Forbidden - Invalid credentials provided." },
          "500": { "description": "Internal server error" }
        }
      }
    },

    "/api/group/all": {
      "get": {
        "tags": ["groups"],
        "summary": "Retrieve all groups accessible by the authenticated user",
        "description": "Fetch a list of all groups where the authenticated user is a member.",
        "operationId": "getGroupsByAuth",
        "security": [{ "BearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Groups list retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/group_detail_response"
                  },
                  "example": [
                    {
                      "id": 1,
                      "name": "Developers Group",
                      "creator_id": 201,
                      "member_count": 25
                    },
                    {
                      "id": 2,
                      "name": "Designers Hub",
                      "creator_id": 202,
                      "member_count": 15
                    }
                  ]
                }
              }
            }
          },
          "400": { "description": "Bad Request - Invalid user ID provided" },
          "401": {
            "description": "Unauthorized - Incorrect password or invalid authorization)."
          },
          "403": { "description": "Forbidden - Invalid credentials provided." },
          "500": { "description": "Internal server error" }
        }
      }
    },

    "/api/group/userGroup/{id}": {
      "get": {
        "tags": ["groups"],
        "summary": "Retrieve groups associated with a user by the ID from url",
        "description": "Fetch a list of groups where the user, specified by their ID, is a member. Includes group details and member count.",
        "operationId": "getGroupsByUrlId",
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the user whose groups are being retrieved",
            "schema": {
              "type": "integer",
              "example": 101
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Groups list retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/group_detail_response"
                }
              }
            }
          },
          "400": { "description": "Bad Request - Invalid user ID provided" },
          "401": {
            "description": "Unauthorized - Incorrect password or invalid authorization)."
          },
          "403": { "description": "Forbidden - Invalid credentials provided." },
          "500": { "description": "Internal server error" }
        }
      }
    },

    "/api/group/create": {
      "post": {
        "tags": ["groups"],
        "summary": "Create a new group",
        "description": "Allows an authenticated user to create a new group with a specified name and description. The authenticated user is set as the group's creator and automatically added as a member.",
        "operationId": "createNewGroup",
        "security": [{ "BearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_group_body"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Group created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/create_group_response"
                }
              }
            }
          },
          "400": { "description": "Bad Request - Invalid group name" },
          "401": {
            "description": "Unauthorized - Incorrect password or invalid authorization)."
          },
          "403": { "description": "Forbidden - Invalid credentials provided." },
          "500": { "description": "Internal server error" }
        }
      }
    },

    "/api/group/{groupId}": {
      "get": {
        "tags": ["groups"],
        "summary": "Get Group by Group ID",
        "description": "Retrieve details of a specific group by its unique ID.",
        "operationId": "getGroupDetails",
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The unique ID of the group",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Group details retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/get_group_response"
                }
              }
            }
          },
          "404": { "description": "Group not found" },
          "401": {
            "description": "Unauthorized - Incorrect password or invalid authorization)."
          },
          "403": { "description": "Forbidden - Invalid credentials provided." },
          "500": { "description": "Internal server error" }
        }
      },
      "put": {
        "tags": ["groups"],
        "summary": "Update Group Details",
        "description": "Update the details of an existing group.",
        "operationId": "updateGroupDetails",
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The unique ID of the group to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_group_body"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Group details updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/update_group_response"
                }
              }
            }
          },
          "404": { "description": "Group not found" },
          "401": {
            "description": "Unauthorized - Incorrect password or invalid authorization)."
          },
          "403": { "description": "Forbidden - Invalid credentials provided." },
          "500": { "description": "Internal server error" }
        }
      }
    },

    "/api/group/{groupId}/join": {
      "post": {
        "tags": ["groups"],
        "summary": "Send Join Request to a Group",
        "description": "Allows an authenticated user to send a request to join a specific group.",
        "operationId": "sendJoinRequest",
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The unique ID of the group",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Join request sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/join_request_response"
                }
              }
            }
          },
          "404": { "description": "Group not found" },
          "401": {
            "description": "Unauthorized - Incorrect password or invalid authorization)."
          },
          "403": { "description": "Forbidden - Invalid credentials provided." },
          "500": { "description": "Internal server error" }
        }
      }
    },

    "/api/group/{groupId}/cancel": {
      "post": {
        "tags": ["groups"],
        "summary": "Cancel Join Request",
        "description": "Allows an authenticated user to cancel their pending join request for a specific group.",
        "operationId": "cancelJoinRequest",
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The unique ID of the group",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Join request canceled successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cancel_request_response"
                }
              }
            }
          },
          "404": { "description": "Group not found" },
          "401": {
            "description": "Unauthorized - Incorrect password or invalid authorization)."
          },
          "403": { "description": "Forbidden - Invalid credentials provided." },
          "500": { "description": "Internal server error" }
        }
      }
    },

    "/api/group/{groupId}/members": {
      "get": {
        "tags": ["groups"],
        "summary": "Retrieve Group Members",
        "description": "Fetches a list of members for a specific group.",
        "operationId": "getGroupMembers",
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The unique ID of the group",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of members in the specified group.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/get_group_members_response"
                }
              }
            }
          },
          "404": { "description": "Group not found" },
          "401": {
            "description": "Unauthorized - Incorrect password or invalid authorization)."
          },
          "403": { "description": "Forbidden - Invalid credentials provided." },
          "500": { "description": "Internal server error" }
        }
      }
    },

    "/api/group/{groupId}/leave": {
      "delete": {
        "tags": ["groups"],
        "summary": "Leave a Group",
        "description": "Allows an authenticated user to leave a specific group they are a member of.",
        "operationId": "leaveGroup",
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The unique ID of the group",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully left the group.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/leave_group_response"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - User is not a member of the specified group."
          },
          "401": {
            "description": "Unauthorized - Incorrect password or invalid authorization)."
          },
          "403": { "description": "Forbidden - Invalid credentials provided." },
          "500": { "description": "Internal server error." }
        }
      }
    },

    "/api/group/delete/{groupId}": {
      "delete": {
        "tags": ["groups"],
        "summary": "Delete a Group",
        "description": "Allows the creator of a group to delete it permanently.",
        "operationId": "deleteGroupByGroupId",
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The unique ID of the group.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Group deleted successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/delete_group_response"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The user is not the owner of the group."
          },
          "401": {
            "description": "Unauthorized - Incorrect password or invalid authorization)."
          },
          "403": { "description": "Forbidden - Invalid credentials provided." },
          "404": { "description": "Not Found - The group does not exist." },
          "500": { "description": "Internal server error." }
        }
      }
    },

    "/api/group/{groupId}/requests": {
      "get": {
        "tags": ["groups"],
        "summary": "Get Pending Join Group Requests",
        "description": "Allows the owner of a group to view all pending join requests for their group.",
        "operationId": "viewPendingRequests",
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The unique ID of the group.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Group deleted successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/view_pending_requests_response"
                  },
                  "example": [
                    {
                      "id": 1,
                      "email": "user@example.com",
                      "firstname": "John",
                      "lastname": "Doe",
                      "request_date": "2024-11-29T14:00:00Z"
                    },
                    {
                      "id": 2,
                      "email": "jane.doe@example.com",
                      "firstname": "Jane",
                      "lastname": "Doe",
                      "request_date": "2024-11-28T10:30:00Z"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The user is not the owner of the group."
          },
          "401": {
            "description": "Unauthorized - Incorrect password or invalid authorizatio."
          },
          "403": { "description": "Forbidden - Invalid credentials provided." },
          "404": { "description": "Not Found - The group does not exist." },
          "500": { "description": "Internal server error." }
        }
      }
    },

    "/api/group/{groupId}/requests/{requestId}": {
      "put": {
        "tags": ["groups"],
        "summary": "Update Join Request Status",
        "description": "Allows the owner of a group to accept or reject a join request for their group.",
        "operationId": "updateJoinRequestStatus",
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The unique ID of the group.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "requestId",
            "in": "path",
            "description": "The unique ID of the join request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The new status of the join request.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_join_requests_body"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Join request status updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/update_join_requests_response"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The user is not the owner or invalid status"
          },
          "401": {
            "description": "Unauthorized - Incorrect password or invalid authorizatio."
          },
          "403": { "description": "Forbidden - Invalid credentials provided." },
          "404": { "description": "Not Found - The group does not exist." },
          "500": { "description": "Internal server error." }
        }
      }
    },

    "/api/group/{groupId}/remove/{memberId}": {
      "put": {
        "tags": ["groups"],
        "summary": "Remove Member from Group",
        "description": "Allows the creator of a group to remove a member from that group.",
        "operationId": "removeMemberFromGroup",
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The unique ID of the group.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "memberId",
            "in": "path",
            "description": "The unique ID of the member to be removed.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Member removed from the group successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/remove_member_response"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The user is not the owner or invalid status"
          },
          "401": {
            "description": "Unauthorized - Incorrect password or invalid authorizatio."
          },
          "403": { "description": "Forbidden - Invalid credentials provided." },
          "404": { "description": "Not Found - The group does not exist." },
          "500": { "description": "Internal server error." }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "user_register_body": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "The email of the user to register."
          },
          "password": {
            "type": "string",
            "description": "The password of the user to register."
          }
        },
        "example": {
          "email": "user@example.com",
          "password": "Password123"
        }
      },

      "user_register_response": {
        "type": "object",
        "required": ["id", "email"],
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique identifier of the registered user."
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "The email of the registered user."
          },
          "token": {
            "type": "string",
            "nullable": true,
            "description": "The JWT token for the registered user. This field is optional and may not always be present."
          }
        },
        "example": {
          "id": "1",
          "email": "user@example.com"
        }
      },

      "user_login_body": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "The email of the user to login."
          },
          "password": {
            "type": "string",
            "description": "The password of the user to login."
          }
        },
        "example": {
          "email": "user@example.com",
          "password": "Password123"
        }
      },

      "user_login_response": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique identifier of the login user."
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "The email of the login user."
          },
          "token": {
            "type": "string",
            "description": "The JWT token for the registered user. This field is optional and may not always be present."
          }
        },
        "example": {
          "id": 2,
          "email": "test2@123.com",
          "token": "ei66yyyy9.ey12345IyfQ.njhhhhh0EdI"
        }
      },

      "user_profile_response": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique identifier of the user."
          },
          "email": {
            "type": "string",
            "description": "The email address of the user."
          },
          "firstname": {
            "type": "string",
            "description": "The first name of the user."
          },
          "lastname": {
            "type": "string",
            "description": "The last name of the user."
          },
          "address": {
            "type": "string",
            "description": "The address of the user."
          },
          "phone": {
            "type": "string",
            "description": "The phone number of the user."
          }
        },
        "example": {
          "id": 1,
          "email": "user@example.com",
          "firstname": "John",
          "lastname": "Doe",
          "address": "123 Main St, Springfield, IL 62701",
          "phone": "+1-555-123-4567"
        }
      },

      "update_profile_body": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "The email address of the user."
          },
          "firstname": {
            "type": "string",
            "description": "The first name of the user."
          },
          "lastname": {
            "type": "string",
            "description": "The last name of the user."
          },
          "address": {
            "type": "string",
            "description": "The address of the user."
          },
          "phone": {
            "type": "string",
            "description": "The phone of the user."
          }
        },
        "example": {
          "email": "user@example.com",
          "firstname": "John",
          "lastname": "Doe",
          "address": "123 Main St, Springfield, IL 62701",
          "phone": "+1-555-123-4567"
        }
      },

      "delete_account_response": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "A message indicating the outcome of the deletion."
          },
          "user": {
            "type": "object",
            "description": "The user object that was deleted.",
            "properties": {
              "id": {
                "type": "string",
                "description": "The unique identifier of the user."
              },
              "email": {
                "type": "string",
                "description": "The email address of the user."
              }
            },
            "required": ["id", "email"]
          }
        },
        "required": ["message", "user"],
        "example": {
          "message": "User ID 123 deleted successfully.",
          "user": {
            "id": "123",
            "email": "user@example.com"
          }
        }
      },

      "passwordCheck_body": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "The email address of the user."
          },
          "password": {
            "type": "string",
            "description": "The password associated with the user's account."
          }
        },
        "required": ["email", "password"],
        "example": {
          "email": "user@example.com",
          "password": "SecurePassword123!"
        }
      },

      "passwordCheck_response": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "A message confirming that the user's identity has been verified."
          },
          "user": {
            "type": "object",
            "description": "Information about the user that was verified.",
            "properties": {
              "id": {
                "type": "string",
                "description": "The unique identifier of the user."
              },
              "email": {
                "type": "string",
                "description": "The email address of the user."
              }
            },
            "required": ["id", "email"]
          }
        },
        "required": ["message", "user"],
        "example": {
          "message": "ID: 123 user is confirmed.",
          "user": {
            "id": "123",
            "email": "user@example.com"
          }
        },
        "favorite_delete_body": {
          "type": "object",
          "required": ["content_id"],
          "properties": {
            "content_id": {
              "type": "string",
              "description": "Content ID to delete"
            }
          }
        }
      },

      "user_pending_request_response": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique identifier for the join request."
          },
          "group_id": {
            "type": "integer",
            "description": "The ID of the group associated with the join request."
          },
          "account_id": {
            "type": "integer",
            "description": "The ID of the user making the join request."
          },
          "status": {
            "type": "string",
            "enum": ["pending", "accepted", "rejected"],
            "description": "The current status of the join request."
          },
          "request_date": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the join request was made."
          },
          "response_date": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the join request was responded to, if applicable."
          }
        },
        "required": ["id", "group_id", "account_id", "status", "request_date"],
        "example": {
          "id": 1,
          "group_id": 101,
          "account_id": 1001,
          "status": "pending",
          "request_date": "2024-11-28T10:30:00Z",
          "response_date": null
        }
      },

      "favorite_item_response": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique identifier for the favorite item."
          },
          "account_id": {
            "type": "integer",
            "description": "The ID of the user who added the item to favorites."
          },
          "content_id": {
            "type": "integer",
            "description": "The ID of the content that is marked as favorite."
          },
          "title": {
            "type": "string",
            "description": "The title of the favorite content."
          },
          "media_type": {
            "type": "string",
            "enum": ["movie", "tv"],
            "description": "The type of media (either 'movie' or 'tv')."
          },
          "poster_path": {
            "type": "string",
            "description": "The path to the poster image of the favorite content."
          },
          "added_date": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the item was added to favorites."
          }
        },
        "required": [
          "id",
          "account_id",
          "content_id",
          "title",
          "media_type",
          "added_date"
        ],
        "example": {
          "id": 1,
          "account_id": 1001,
          "content_id": 2001,
          "title": "Inception",
          "media_type": "movie",
          "poster_path": "/path/to/inception.jpg",
          "added_date": "2024-11-28T10:30:00Z"
        }
      },

      "favorite_add_body": {
        "type": "object",
        "properties": {
          "content_id": {
            "type": "integer",
            "description": "Unique identifier for the content item."
          },
          "title": {
            "type": "string",
            "description": "Title of the content item."
          },
          "media_type": {
            "type": "string",
            "enum": ["movie", "tv"],
            "description": "Type of the media (e.g., movie, tv)."
          },
          "poster_path": {
            "type": "string",
            "description": "URL or path to the content item's poster image."
          }
        },
        "required": ["content_id", "title", "media_type"],
        "example": {
          "content_id": "12345",
          "title": "Inception",
          "media_type": "movie",
          "poster_path": "https://example.com/inception.jpg"
        }
      },

      "favorite_check_body": {
        "type": "object",
        "properties": {
          "content_id": {
            "type": "string",
            "description": "Unique identifier for the content item to check in favorites."
          }
        },
        "required": ["content_id"],
        "example": {
          "content_id": 12345
        }
      },

      "favorite_check_response": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Indicates whether the content is in favorites."
          },
          "favorite": {
            "type": "boolean",
            "description": "True if the content is in favorites, false otherwise."
          }
        },
        "example": {
          "message": "The content is in your favorites.",
          "favorite": true
        }
      },

      "favorite_delete_body": {
        "type": "object",
        "properties": {
          "content_id": {
            "type": "integer",
            "description": "Unique identifier for the content item to be deleted from favorites."
          }
        },
        "required": ["content_id"],
        "example": {
          "content_id": 12345
        }
      },

      "favorite_delete_response": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Confirmation message indicating successful deletion."
          }
        }
      },

      "group_response": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier for the group"
          },
          "name": {
            "type": "string",
            "description": "Name of the group"
          },
          "description": {
            "type": "string",
            "description": "Description of the group"
          },
          "creator_id": {
            "type": "integer",
            "description": "ID of the group creator (can be null)"
          }
        },
        "example": {
          "id": 1,
          "name": "Developers Group",
          "description": "A group for developers",
          "creator_id": 101
        }
      },

      "group_detail_response": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier for the group"
          },
          "name": {
            "type": "string",
            "description": "Name of the group"
          },
          "description": {
            "type": "string",
            "description": "Description of the group"
          },
          "creator_id": {
            "type": "integer",
            "description": "ID of the group creator (can be null)"
          },
          "member_count": {
            "type": "integer",
            "description": "Number of members in the group"
          }
        },
        "example": {
          "id": 1,
          "name": "Developers Group",
          "description": "A group for developers",
          "creator_id": 101,
          "member_count": 15
        }
      },

      "create_group_body": {
        "type": "object",
        "required": ["name"],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the group",
            "maxLength": 50
          },
          "description": {
            "type": "string",
            "description": "A brief description of the group",
            "maxLength": 200
          }
        },
        "example": {
          "name": "Developers Group",
          "description": "A group for developers to collaborate"
        }
      },

      "create_group_response": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier for the group"
          },
          "name": {
            "type": "string",
            "description": "The name of the group"
          },
          "description": {
            "type": "string",
            "description": "A brief description of the group"
          },
          "creator_id": {
            "type": "integer",
            "description": "ID of the user who created the group"
          }
        },
        "example": {
          "id": 1,
          "name": "Developers Group",
          "description": "A group for developers to collaborate",
          "creator_id": 101
        }
      },

      "get_group_response": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "Group Name"
          },
          "description": {
            "type": "string",
            "example": "Group description"
          },
          "creator_id": {
            "type": "integer",
            "example": 10
          }
        },
        "example": {
          "id": 1,
          "name": "Study Group",
          "description": "A group for students to collaborate on homework and projects.",
          "creator_id": 10
        }
      },

      "update_group_body": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The updated name of the group",
            "example": "Updated Group Name"
          },
          "description": {
            "type": "string",
            "description": "The updated description of the group",
            "example": "Updated group description"
          }
        },
        "required": ["name", "description"]
      },

      "update_group_response": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "Group Name"
          },
          "description": {
            "type": "string",
            "example": "Group description"
          },
          "creator_id": {
            "type": "integer",
            "example": 10
          }
        }
      },

      "join_request_response": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Join request sent successfully"
          },
          "request": {
            "type": "object",
            "description": "Details of the join request",
            "properties": {
              "id": {
                "type": "integer",
                "example": 123
              },
              "group_id": {
                "type": "integer",
                "example": 10
              },
              "account_id": {
                "type": "integer",
                "example": 5
              },
              "status": {
                "type": "string",
                "example": "pending"
              },
              "request_date": {
                "type": "string",
                "format": "date-time",
                "example": "2024-11-29T12:34:56Z"
              },
              "response_date": {
                "type": "string",
                "format": "date-time",
                "example": "2024-11-30T12:34:56Z"
              }
            }
          }
        },
        "example": {
          "message": "Join request sent successfully",
          "request": {
            "id": 123,
            "group_id": 10,
            "account_id": 5,
            "status": "pending",
            "request_date": "2024-11-29T12:34:56Z",
            "response_date": null
          }
        }
      },

      "cancel_request_response": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Join request cancel successfully"
          },
          "request": {
            "type": "object",
            "description": "Details of the canceled join request",
            "properties": {
              "id": {
                "type": "integer",
                "example": 123
              },
              "group_id": {
                "type": "integer",
                "example": 10
              },
              "account_id": {
                "type": "integer",
                "example": 5
              },
              "status": {
                "type": "string",
                "example": "pending"
              },
              "request_date": {
                "type": "string",
                "format": "date-time",
                "example": "2024-11-29T12:34:56Z"
              },
              "response_date": {
                "type": "string",
                "format": "date-time",
                "example": "2024-11-30T12:34:56Z"
              }
            }
          }
        },
        "example": {
          "message": "Join request canceled successfully",
          "request": {
            "id": 123,
            "group_id": 10,
            "account_id": 5,
            "status": "canceled",
            "request_date": "2024-11-29T12:34:56Z",
            "response_date": "2024-11-30T12:34:56Z"
          }
        }
      },

      "get_group_members_response": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "example": 1
            },
            "email": {
              "type": "string",
              "example": "user@example.com"
            },
            "firstname": {
              "type": "string",
              "example": "John"
            },
            "lastname": {
              "type": "string",
              "example": "Doe"
            }
          }
        },
        "example": [
          {
            "id": 1,
            "email": "user1@example.com",
            "firstname": "John",
            "lastname": "Doe"
          },
          {
            "id": 2,
            "email": "user2@example.com",
            "firstname": "Jane",
            "lastname": "Smith"
          }
        ]
      },

      "leave_group_response": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "You have left the group"
          }
        }
      },

      "delete_group_response": {
        "type": "object",
        "properties": {
          "group": {
            "type": "object",
            "properties": {
              "id": { "type": "integer", "example": 1 },
              "name": { "type": "string", "example": "Example Group" },
              "description": {
                "type": "string",
                "example": "This is an example group description."
              },
              "creator_id": {
                "type": "integer",
                "example": 123
              }
            }
          },
          "message": {
            "type": "string",
            "example": "Group 'Example Group' with ID 1 deleted successfully."
          }
        },
        "example": {
          "group": {
            "id": 1,
            "name": "group2",
            "description": "group2 desc",
            "creator_id": 1
          },
          "message": "Group 'group2' with ID 1 deleted successfully."
        }
      },

      "view_pending_requests_response": {
        "type": "object",
        "properties": {
          "id": { "type": "integer", "example": 1 },
          "email": { "type": "string", "example": "user@example.com" },
          "firstname": { "type": "string", "example": "John" },
          "lastname": { "type": "string", "example": "Doe" },
          "request_date": {
            "type": "string",
            "format": "date-time",
            "example": "2024-11-29T14:00:00Z"
          }
        }
      },

      "update_join_requests_body": {
        "type": "object",
        "required": ["status"],
        "properties": {
          "status": {
            "type": "string",
            "enum": ["accepted", "rejected"],
            "description": "The status to update the join request to."
          }
        },
        "example": {
          "status": "accepted"
        }
      },

      "update_join_requests_response": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "A message confirming the operation."
          }
        },
        "examples": {
          "accepted": {
            "value": {
              "message": "Join request accepted"
            }
          },
          "rejected": {
            "value": {
              "message": "Join request rejected"
            }
          }
        }
      },

      "remove_member_response": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Member removed from the group"
          }
        }
      }
    }
  }
}
